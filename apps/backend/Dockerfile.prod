# ==========================================
# üèóÔ∏è STAGE 1: BUILDER
# ==========================================
FROM node:18-alpine AS builder

# Metadados
LABEL maintainer="Felipe Batista <felipe@vpioneira.com.br>"
LABEL description="Telemetria Pioneira - Backend Builder"

# Instalar depend√™ncias do sistema necess√°rias para build
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    curl

# Instalar pnpm globalmente
RUN npm install -g pnpm@8.15.0

# Configurar diret√≥rio de trabalho
WORKDIR /build

# Copiar arquivos de configura√ß√£o do workspace (monorepo)
COPY pnpm-workspace.yaml ./
COPY pnpm-lock.yaml ./
COPY package.json ./
COPY turbo.json ./

# Copiar package.json do backend
COPY apps/backend/package.json ./apps/backend/

# Instalar TODAS as depend√™ncias (incluindo devDependencies para build)
RUN pnpm install --frozen-lockfile

# Copiar c√≥digo-fonte do backend
COPY apps/backend ./apps/backend

# Build do TypeScript
WORKDIR /build/apps/backend
RUN pnpm build

# Limpar devDependencies ap√≥s build
RUN pnpm install --prod --frozen-lockfile

# ==========================================
# üöÄ STAGE 2: RUNNER (Produ√ß√£o)
# ==========================================
FROM node:18-alpine AS runner

# Metadados
LABEL maintainer="Felipe Batista <felipe@vpioneira.com.br>"
LABEL description="Telemetria Pioneira - Backend Production"
LABEL version="1.0.0"

# Instalar apenas depend√™ncias de runtime necess√°rias
RUN apk add --no-cache \
    curl \
    ca-certificates \
    tzdata \
    tini

# Criar usu√°rio n√£o-root para seguran√ßa
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Configurar timezone (Bras√≠lia)
ENV TZ=America/Sao_Paulo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Configurar diret√≥rio de trabalho
WORKDIR /app

# Copiar node_modules de produ√ß√£o do builder
COPY --from=builder --chown=nodejs:nodejs /build/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /build/apps/backend/node_modules ./apps/backend/node_modules

# Copiar c√≥digo compilado (dist) e arquivos necess√°rios
COPY --from=builder --chown=nodejs:nodejs /build/apps/backend/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /build/apps/backend/package.json ./package.json

# Copiar templates de email (necess√°rios em runtime)
COPY --from=builder --chown=nodejs:nodejs /build/apps/backend/src/templates ./src/templates

# Criar diret√≥rio de logs com permiss√µes corretas
RUN mkdir -p /app/logs && \
    chown -R nodejs:nodejs /app/logs

# Vari√°veis de ambiente padr√£o (sobrescritas pelo docker-compose)
ENV NODE_ENV=production \
    HOST=0.0.0.0 \
    PORT=3333 \
    LOG_TO_CONSOLE=true

# Expor porta da aplica√ß√£o
EXPOSE 3333

# Mudar para usu√°rio n√£o-root
USER nodejs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3333/health || exit 1

# Usar tini para gerenciamento correto de sinais (graceful shutdown)
ENTRYPOINT ["/sbin/tini", "--"]

# Comando padr√£o (API)
# Para workers, sobrescrever com: command: ["node", "dist/workers/event-ingestion-runner.js"]
CMD ["node", "dist/server.js"]