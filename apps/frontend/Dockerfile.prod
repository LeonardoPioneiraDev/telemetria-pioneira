# ==========================================
# üèóÔ∏è STAGE 1: DEPS - INSTALA√á√ÉO DE DEPEND√äNCIAS
# ==========================================
FROM node:18-alpine AS deps

# Metadados
LABEL maintainer="Felipe Batista <felipe@vpioneira.com.br>"
LABEL description="Telemetria Pioneira - Frontend Dependencies"

# Instalar depend√™ncias do sistema para build
RUN apk add --no-cache libc6-compat python3 make g++

# Instalar pnpm
RUN npm install -g pnpm@8.15.0

WORKDIR /app

# Copiar arquivos de depend√™ncias do monorepo
COPY pnpm-workspace.yaml ./
COPY pnpm-lock.yaml ./
COPY package.json ./

# Copiar package.json do frontend
COPY apps/frontend/package.json ./apps/frontend/

# Instalar depend√™ncias
RUN pnpm install --frozen-lockfile

# ==========================================
# üèóÔ∏è STAGE 2: BUILDER - BUILD DA APLICA√á√ÉO
# ==========================================
FROM node:18-alpine AS builder

# Metadados
LABEL maintainer="Felipe Batista <felipe@vpioneira.com.br>"
LABEL description="Telemetria Pioneira - Frontend Builder"

# Instalar pnpm
RUN npm install -g pnpm@8.15.0

WORKDIR /app

# Copiar node_modules do stage anterior
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/frontend/node_modules ./apps/frontend/node_modules

# Copiar c√≥digo-fonte
COPY apps/frontend ./apps/frontend
COPY pnpm-workspace.yaml ./
COPY package.json ./

# Build arguments (vari√°veis de ambiente em build time)
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_APP_NAME
ARG NEXT_PUBLIC_APP_VERSION

# Setar vari√°veis de ambiente para build
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV NEXT_PUBLIC_APP_NAME=$NEXT_PUBLIC_APP_NAME
ENV NEXT_PUBLIC_APP_VERSION=$NEXT_PUBLIC_APP_VERSION
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Build do Next.js (modo standalone - SEM turbopack no Docker)
WORKDIR /app/apps/frontend
RUN NODE_ENV=production pnpm exec next build

# ==========================================
# üöÄ STAGE 3: RUNNER - PRODU√á√ÉO
# ==========================================
FROM node:18-alpine AS runner

LABEL maintainer="Felipe Batista <felipe@vpioneira.com.br>"
LABEL description="Telemetria Pioneira - Frontend Production"
LABEL version="1.0.0"

RUN apk add --no-cache curl ca-certificates tzdata tini

RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

ENV TZ=America/Sao_Paulo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# 1. Copiar TODOS os arquivos de depend√™ncia necess√°rios para o pnpm
COPY --from=builder --chown=nextjs:nodejs /app/apps/frontend/package.json ./package.json
COPY --from=deps --chown=nextjs:nodejs /app/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=deps --chown=nextjs:nodejs /app/pnpm-workspace.yaml ./pnpm-workspace.yaml

# 2. Copiar os arquivos da aplica√ß√£o J√Å BUILDADOS (sem o server.js problem√°tico)
COPY --from=builder --chown=nextjs:nodejs /app/apps/frontend/.next ./.next
COPY --from=builder --chown=nextjs:nodejs /app/apps/frontend/public ./public

# 3. Instalar pnpm
RUN npm install -g pnpm@8.15.0

# 4. Instalar as depend√™ncias de produ√ß√£o
RUN pnpm install --prod

USER nextjs

EXPOSE 3000

HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

ENTRYPOINT ["/sbin/tini", "--"]

# 5. Iniciar o servidor Next.js a partir do execut√°vel em node_modules (A MUDAN√áA EST√Å AQUI üëá)
CMD ["node_modules/.bin/next", "start"]